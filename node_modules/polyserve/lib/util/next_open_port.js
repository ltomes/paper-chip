/**
 * @license
 * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const findPort = require("find-port");
/**
 * If port unspecified/negative, finds an open port on localhost
 * @param {number} port
 * @returns {Promise<number>} Promise of open port
 */
function nextOpenPort(port) {
    return __awaiter(this, void 0, void 0, function* () {
        if (port == null || port < 0) {
            port = yield new Promise(resolve => {
                // TODO: Switch from `find-port` to `get-port`. `find-port` always
                // resolves a port number even if none are available. The error-event
                // handler in `startWithPort` catches the issue.
                findPort(8080, 8180, (ports) => {
                    resolve(ports[0]);
                });
            });
        }
        return port;
    });
}
exports.nextOpenPort = nextOpenPort;
//# sourceMappingURL=next_open_port.js.map